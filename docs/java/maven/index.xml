<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Maven on 安橙的博客</title><link>https://blog.ans20xx.com/docs/java/maven/</link><description>Recent content in Maven on 安橙的博客</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy; 2022 &lt;a href="https://www.ans20xx.com/">安橙&lt;/a></copyright><lastBuildDate>Wed, 07 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.ans20xx.com/docs/java/maven/index.xml" rel="self" type="application/rss+xml"/><item><title>5-Maven 插件管理</title><link>https://blog.ans20xx.com/docs/java/maven/chapter-5/</link><pubDate>Sat, 04 Feb 2023 10:30:46 +0800</pubDate><guid>https://blog.ans20xx.com/docs/java/maven/chapter-5/</guid><description>1. 概述 Maven 利用插件来自动化和执行所有的构建和生成报告的任务。 然而，项目中可能由多个相同的插件，它们的配置和版本都不一样，特别在多模块的项目中，这会让项目</description></item><item><title>6-Maven 目标和阶段</title><link>https://blog.ans20xx.com/docs/java/maven/chapter-6/</link><pubDate>Sat, 04 Feb 2023 10:30:46 +0800</pubDate><guid>https://blog.ans20xx.com/docs/java/maven/chapter-6/</guid><description>1. 概述 本文将会探索不同的 Maven 构建声明周期和它们的阶段。 也会深入讨论目标和阶段之间的核心关联。 2. Maven 构建生命周期 Maven 构建遵循一个指定的生命周期来部署和分发目标</description></item><item><title>7-Maven 多模块项目</title><link>https://blog.ans20xx.com/docs/java/maven/chapter-7/</link><pubDate>Sat, 04 Feb 2023 10:30:46 +0800</pubDate><guid>https://blog.ans20xx.com/docs/java/maven/chapter-7/</guid><description>1. 概述 本文主要描述 Maven 多模块项目如何创建。 描述什么是多模块项目以及使用该方法的好处。 2. Maven 的多模块项目 一个多模块项目根据一个聚合 pom 文件构建，该文件管理一组</description></item><item><title>4-Maven 依赖作用域</title><link>https://blog.ans20xx.com/docs/java/maven/chapter-4/</link><pubDate>Sat, 04 Feb 2023 10:15:46 +0800</pubDate><guid>https://blog.ans20xx.com/docs/java/maven/chapter-4/</guid><description>1. 概述 下面的内容将描述 Maven 的依赖作用域-它能帮助 Maven 解决间接依赖。 2. 间接依赖 Maven 中有两种形式的依赖：直接依赖和间接依赖。 直接依赖是我们在项目中显式声明的依赖</description></item><item><title>3-Maven Profile</title><link>https://blog.ans20xx.com/docs/java/maven/chapter-3/</link><pubDate>Wed, 01 Feb 2023 15:15:46 +0800</pubDate><guid>https://blog.ans20xx.com/docs/java/maven/chapter-3/</guid><description>1. 概述 Maven Profile 可以被用来创建自定义的构建配置，例如指定一个测试粒度，或者是指定部署环境。 2. 简单例子 通常，我们运行 mvn package，单元测试也会被执行，如果</description></item><item><title>2-Maven 标准目录结构</title><link>https://blog.ans20xx.com/docs/java/maven/chapter-2/</link><pubDate>Sun, 29 Jan 2023 15:15:46 +0800</pubDate><guid>https://blog.ans20xx.com/docs/java/maven/chapter-2/</guid><description>1. 简介 Apache Maven 除了分离依赖和仓库外，还提供了一个标准的工程目录结构。 2. 目录结构 一个标准的 Maven 工程有一个 pom.xml 文件，还有一个基于约定的目录结构。 使用项目描述符可以</description></item><item><title>1-Maven 简介</title><link>https://blog.ans20xx.com/docs/java/maven/chapter-1/</link><pubDate>Tue, 29 Nov 2022 15:15:46 +0800</pubDate><guid>https://blog.ans20xx.com/docs/java/maven/chapter-1/</guid><description>1. 构建应用程序 构建一个应用程序往往由以下几个步骤组成： 下载依赖 将依赖 jar 包放在 classpath 目录下 将源代码编译为二进制码 运行测试 将编译结果打包成可部署的软件包：ja</description></item><item><title/><link>https://blog.ans20xx.com/docs/java/maven/chapter-8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.ans20xx.com/docs/java/maven/chapter-8/</guid><description/></item></channel></rss>